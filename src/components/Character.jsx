/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/character.glb -o src/components/Character.jsx -r public
*/
import * as THREE from "three";
import { useAnimations, useEnvironment, useGLTF } from "@react-three/drei";
import React, { useEffect, useRef } from "react";
import { useControls } from "leva";
//import { roughness } from "three/src/nodes/TSL.js";

export function Character({ ...props }) {
  const group = useRef();
  //const mirrorSphereCamera = useRef();

  /* const theprops = useControls({
    roughness: { value: 0.0, min: 0, max: 1 },
    metalness: { value: 0.8, min: 0, max: 1 },
    color: "#ffEEEEE",
  }); */

  //const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(1024);
  //mirrorSphereCamera = new THREE.CubeCamera(0.05, 50, cubeRenderTarget);
  //scene.add(mirrorSphereCamera);

  //const envMap = cubeRenderTarget.texture;

  //const mirrorSphereMaterial = new THREE.MeshBasicMaterial({
  //  envMap: cubeRenderTarget.texture,
  //});

  //const { nodes, materials, animations } = useGLTF("/models/character.glb");
  //const { actions } = useAnimations(animations, group);
  /* useEffect(() => {
    actions[animation]?.reset().fadeIn(0.24).play();
    return () => actions?.[animation]?.fadeOut(0.24);
  }, [animation]); */

  //{/* ...theprops  envMap={envMap} */}

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh {...props}>
        <sphereGeometry args={[1, 64, 64]} />
        <meshStandardMaterial roughness={0} metalness={0.8} color={"#ff0fff"} />
        {/* <meshPhysicalMaterial
          color={"#ffffff"}
          clearcoat={1}
          clearcoatRoughness={0}
          roughness={0}
          reflectivity={0.5}
          metalness={0.5}
        /> */}
      </mesh>
      {/* <group name="Scene">
        <group name="fall_guys">
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            name="body"
            geometry={nodes.body.geometry}
            material={materials.Material}
            skeleton={nodes.body.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="eye"
            geometry={nodes.eye.geometry}
            material={materials.Material}
            skeleton={nodes.eye.skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="hand-"
            geometry={nodes["hand-"].geometry}
            material={materials.Material}
            skeleton={nodes["hand-"].skeleton}
            castShadow
            receiveShadow
          />
          <skinnedMesh
            name="leg"
            geometry={nodes.leg.geometry}
            material={materials.Material}
            skeleton={nodes.leg.skeleton}
            castShadow
            receiveShadow
          />
        </group>
      </group> */}
    </group>
  );
}

//useGLTF.preload("/models/character.glb");
